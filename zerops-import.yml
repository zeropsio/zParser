project:
  name: yaml parser test
services:
  - hostname: "{$generateRandomString(20)}"
    envVariables:
      NORMAL_ENV: ${MY_COOL_ENV}
      NORMAL_ENV_IN_QUOTES: "${MY_COOL_QUOTED_ENV}"
      MULTIPLE_NESTED_ENVS: "${my_e${my_e${my_env}nv}nv}"

      ESCAPED_VALUE: "{{MY_ESCAPED_VALUE}}"
      ESCAPED_VALUE_DOUBLE: "{{{MY_ESCAPED_VALUE}}}"

      STRING_WITH_ENV_INSIDE: "{my super cool string with ${myEnvVar} inside for whatever reason | noop}"

      MULTI_LINE_STRING: "{{ ESC \
       apEd \
       Multi L \
       ine
       STRING 
       | upper}
      }"

      ONE_FUNCTION: "{$generateRandomString(20)}"
      TWO_FUNCTIONS: "{$generateRandomString(20)}{$generateRandomInt(1, 9999)}"
      NESTED_FUNCTIONS: "{$generateRandomString({$generateRandomInt(10, 50)})}"

      STRING_ONE_MODIFIER: "{my super cool string | upper}"
      STRING_TWO_MODIFIERS: "{my super cool string | upper | sha512}"

      NESTED_STRINGS_ONE_MODIFIER: "{my super cool { and my nested } strings | upper}"
      NESTED_STRINGS_ONE_NESTED_MODIFIER: "{my super cool { And My NeStED | upper } strings}"

      WRITE_STRING: "{$writeString({$ some random string $})}"
      WRITE_STRING_ONE_MODIFIER: "{$writeString({$ some random string $}) | upper}"

      WRITE_STRING_COMPLEX: "{$writeString({$)}generateRandomString(20){$writeString(})}"
      # modifier should work with space between first 2 braces, but not without it (at that point, it would consider first brace as an escape character)
      WRITE_STRING_COMPLEX_ONE_MODIFIER: "{ {$writeString({$)}generateRandomString(20){$writeString(})} | upper}"
      WRITE_STRING_COMPLEX_ONE_MODIFIER_NO_SPACE: "{{$writeString({$)}generateRandomString(20){$writeString(})} | upper}"

      FUNCTION_ONE_MODIFIER: "{$generateRandomString(20) | upper}"
      FUNCTION_TWO_MODIFIERS: "{$generateRandomString(20) | upper | sha512}"

      NESTED_FUNCTION_ONE_MODIFIER: "{$generateRandomString({$generateRandomInt(10, 50)}) | upper}"
      NESTED_FUNCTION_TWO_MODIFIERS: "{$generateRandomString({$generateRandomInt(10, 50)}) | upper | sha512}"

      NESTED_FUNCTION_ONE_NESTED_MODIFIER: "{$namedString(myRandomString, {$generateRandomString(20) | upper})}"
      NESTED_FUNCTION_ONE_NESTED_ONE_NORMAL_MODIFIER: "{$namedString(myAnotherRandomString, {$generateRandomString(20) | upper}) | sha512}"

      EXISTING_STRING: "{$getNamedString(myRandomString)}"
      EXISTING_STRING_ONE_MODIFIER: "{$getNamedString(myRandomString) | lower}"

      QUAD_NESTED_FUNCTIONS: "{$namedString(megaNestedString, {$generateRandomString({$generateRandomInt({$generateRandomInt(10, 50)}, {$generateRandomInt(51, 100)})})}) | upper}"

      FUNCTION_WITH_SUPPORTED_CHARS: "{$namedString(questionableString, this is a | totally {{ valid string that }} should just work | without any issues !@#$%^&*_+{{}}:|?><) | upper}"

      CURRENT_DATE: "{$getDatetime(DD.MM.YYYY)}"
      CURRENT_DATE_TIME: "{$getDatetime(DD.MM.YYYY HH:mm:ss)}"

      PASSWORD_PLAIN: "{$generateRandomNamedString(myPassword, 30)}"
      PASSWORD_SHA512: "{$getNamedString(myPassword) | sha512}"
      PASSWORD_BCRYPT: "{$getNamedString(myPassword) | bcrypt}"

      ED25519_KEY_PUB: "{$generateED25519Key(myED25519Key)}"

      ED25519_KEY_PRIVATE: |
        {$getNamedString(myED25519KeyPrivate)}

      RSA_KEY_PUB: "{$generateRSA4096Key(myRSA4096Key)}"

      RSA_KEY_PRIVATE: |
        {$getNamedString(myRSA4096KeyPrivate)}

      MERCURY_RETROGRADE: "{$mercuryInRetrograde(mercury is in retrograde, mercury is not in retrograde) | title}"

      BROKEN_KEY_START: |
        this thing will break
        its quite sad
        but it's the truth,
        unless we escape it {{}

      BROKEN_KEY_END: |
        I think this wont work
        but just in case...
        Maybe escaping
        using curly braces
        is the norm }
